[
  {
    "id": "1",
    "github" : "blog",
    "videoSrc": "/videos/techblog.mp4",
    "title": "Blog",
    "description": "A blog web application which allows users to post their news.",
    "techstack": "typescript, react, express, prisma, postgres, firebase cloud storage",
    "createdAt": "2024-05",
    "idea": "The primary goal of this project was to develop a full-stack application using a technology stack comprising Express.js, TypeScript, PrismaORM, and PostgreSQL. I specifically selected this stack out of a desire to deepen my knowledge of TypeScript and to explore the use of an ORM that integrates seamlessly with a relational database. I decided to create a blog application because it encompasses all CRUD operations, providing a comprehensive learning experience. Additionally, the incorpatation of a cloud ensures persistent storage of images. ",
    "implementation" :"The project is structured in a typical REST service architecture. The backend is built with Express.js, which provides endpoints for all CRUD operations required by the frontend. The frontend, built with React, allows users to upload, edit, fetch, and delete blog posts. User authentication is handled using JSON Web Tokens (JWT). When a user logs in, a token is generated and signed with user information, then stored as an HTTP cookie. A profile endpoint continuously validates the token whenever the header gets mounted and responds with the corresponding user information. The blog creation and editing functionalities utilize the React-Quill library. React-Quill offers a user-friendly text editor, allowing users to create and edit posts effortlessly. All user and blog post data is stored in a PostgreSQL database. Firebase Cloud is used to provide a persistent storage for the file images in order to achieve reliabilty, even after restarts and redeployments. The database schema is designed to reference user and post entries, ensuring data integrity and efficient querying. The frontend is deployed using Netlify, providing a seamless and efficient deployment pipeline for the React application. The backend server and the PostgreSQL database are deployed using Railway, ensuring reliable and scalable hosting for the server and database.",
    "deployment" : "https://myfullstacktechblog.netlify.app"
           
  },
  {
    "id": "2",
    "github": "spring-react-progex",
    "videoSrc": "/videos/murdoc.mp4",
    "title": "Murdoc",
    "description": "A social media web application with the twist that a user post consists of a document.",
    "techstack": "react, spring-boot, firebase",
    "createdAt": "2023-07-21",
    "idea": "As part of an uni project we were given the task to create any type of software able to interface with a database. Murdoc is a social media web application that lets users post PDF document on thier feed. It's features resembles a typical social media application. Users are able to post, follow each other and view each others document. The application places special emphasis on document sharing by features such as saving posts and viewing them in a virtual directory. The most important part of this project was to understand the underlying technology to create such a application, instead of creating a ground breaking way of sharing documents.  ",
    "implementation" :"Murdoc is full stack web application with a typical REST service architecture.  The backend, built with Spring Boot, provides RESTful API endpoints for CRUD operations. The frontend, built with React, consumes these endpoints to manage user interactions and document sharing. Google's Firebase cloud service is used for data storage. Firebase Authentication handles authentication, ensuring secure access to the application. From a devolopers view, adding the REST service is impractical, since the application could be achieved by letting the client talk to Firebase directly. However, creating the application as a REST service adds security as our Spring server acts as a proxy between the cloud and client.",
    "deployment" : ""
  },
  {
    "id": "3",
    "github" : "flask-chat-app",
    "videoSrc": "/videos/techblog.mp4",
    "title": "Chat",
    "description": "A chat room application in which users can chat in real time.",
    "techstack": "python, flask",
    "createdAt": "2023-08-10",
    "idea": "Here is the detailed idea behind the Chat project.",
    "implementation" :"x",
    "deployment" : ""
  }
]
